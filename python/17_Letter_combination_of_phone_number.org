#+TITLE:       17. Letter Combinations of Phone Numbers
#+AUTHOR:      Richard Wilson
#+DATE:        8/30/22

#+OPTIONS: ^:{}
#+OPTIONS: todo:nil

* Problem
Difficulty: Medium https://leetcode.com/problems/letter-combinations-of-a-phone-number/submissions/

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].

* Solution

#+begin_src python
import itertools 

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if len(digits) == 0:
            return []
        
        mapping = {
            "2" : ["a","b","c"]
            ,"3" : ["d","e","f"]
            ,"4" : ["g","h","i"]
            ,"5" : ["j","k","l"]
            ,"6" : ["m","n","o"]
            ,"7" : ["p","q","r","s"]
            ,"8" : ["t","u","v"]
            ,"9" : ["w","x","y","z"]
        }
        char_list = []
        length_list = []
        lol = []
        rl = []
        for char in digits:
            val = mapping[char]
            char_list += val
            length_list.append(len(val))
        if len(digits) == 1:
            return char_list
        elif len(digits) == 2:
            lol = list(itertools.product(char_list[0:length_list[0]]
                                        ,char_list[length_list[0]:]
                                        ))
        elif len(digits) == 3:
            lol = list(itertools.product(char_list[0:length_list[0]]
                                         ,char_list[length_list[0]:length_list[0]+length_list[1]]
                                         ,char_list[length_list[0]+length_list[1] : ]
                                        ))
        elif len(digits) == 4:
            lol = list(itertools.product(char_list[0:length_list[0]]
                                         ,char_list[length_list[0]:length_list[0]+length_list[1]]
                                         ,char_list[length_list[0]+length_list[1] : length_list[0]+length_list[1] + length_list[2]]
                                         ,char_list[length_list[0]+length_list[1]+length_list[2]  : ]
                                        ))
        for l in lol:
            rl.append("".join(l))
        return rl
#+end_src

Success
Details 
Runtime: 65 ms, faster than 9.32% of Python3 online submissions for Letter Combinations of a Phone Number.
Memory Usage: 14 MB, less than 31.59% of Python3 online submissions for Letter Combinations of a Phone Number.


Not a great solution and definitlely not scalable
