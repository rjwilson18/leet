#+TITLE:       9. Palindrome Number
#+AUTHOR:      Richard Wilson
#+DATE:        08/30/22

#+OPTIONS: ^:{}
#+OPTIONS: todo:nil

* Problem
Difficulty: Easy

https://leetcode.com/problems/palindrome-number/submissions/

Given an integer x, return true if x is palindrome integer.

An integer is a palindrome when it reads the same backward as forward.

For example, 121 is a palindrome while 123 is not.
 

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
 

Constraints:

-2^31 <= x <= 2^31 - 1

Follow up: Could you solve it without converting the integer to a string?

* Solution
** String based solution
#+begin_src python
class Solution:
    def isPalindrome(self, x: int) -> bool:
        return str(x) == str(x)[::-1]
#+end_src

Success
Details 
Runtime: 97 ms, faster than 53.66% of Python3 online submissions for Palindrome Number.
Memory Usage: 13.9 MB, less than 16.00% of Python3 online submissions for Palindrome Number.

* Non-String based Solution
#+begin_src python
class Solution:  
    
    def isPalindrome(self, x: int) -> bool:
        #negative numbers cannot be palindromes
        if x < 0:
            return False
        #single digit numbers are automatic palindromes
        elif x < 10: 
            return True
        #numbers ending in 0 (other than 0) cannot be palindromes
        if x % 10 == 0: 
            return False
        
        
        def getDigitCount(x):
            digit_count = 0
            while(x // 10**digit_count):
                digit_count +=1
            return digit_count
       
    
        digits = getDigitCount(x)
        
        half_digits = digits // 2
          
        rev_half = 0
        x0 = x
        mag = 10**(digits-1)
        for i in range(0,half_digits):
            rev_half += (x % 10) * mag 
            x //= 10 
            mag //= 10
        if x0 // rev_half < 10 and rev_half < x0:
            return True   
        return False
#+end_src

Success
Runtime: 117 ms, faster than 28.29% of Python3 online submissions for Palindrome Number.
Memory Usage: 13.8 MB, less than 59.45% of Python3 online submissions for Palindrome Number.
